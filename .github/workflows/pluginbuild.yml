on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - name: macOS-x64
            os: macos-latest

          - name: Linux-x64
            os: ubuntu-latest

          # - name: Windows-x64
          #   os: windows-2019

    env:
      SC_PATH: ${{ github.workspace }}/supercollider
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      ARCHIVE_NAME: RAVE-${{ matrix.name }}.zip
    steps:
    - name: Checkout RAVE
      uses: actions/checkout@v2

    - name: Checkout SuperCollider
      uses: actions/checkout@v2
      with:
        repository: supercollider/supercollider
        path: ${{ env.SC_PATH }}
        ref: main

    - name: get mamba (macOS)
      if: runner.os == 'macOS'
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge

    - name: get torch (macOS)
      if: runner.os == 'macOS'
      run: |
        mamba install pytorch=2.0 -c pytorch
        $(conda info --base)/bin/python -c "import torch; from pathlib import Path; print(f'TORCH_PATH={Path(torch.__file__).parent}')" | tee -a $GITHUB_ENV

    # - name: get libtorch (macOS)
    #   if: runner.os == 'macOS'
    #   run: |
    #     wget https://download.pytorch.org/libtorch/cpu/libtorch-macos-1.12.1.zip
    #     unzip "libtorch-macos-1.12.1.zip"
    #     echo TORCH_PATH=$(pwd)/libtorch | tee -a $GITHUB_ENV

    # - name: get clang (Linux)
    #   if: runner.os == 'Linux'
    #   uses: KyleMayes/install-llvm-action@v1
    #   with:
    #     version: "13.0"

    - name: get libtorch (Linux)
      if: runner.os == 'Linux'
      run: |
        wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.0.0%2Bcpu.zip
        unzip "libtorch-cxx11-abi-shared-with-deps-2.0.0+cpu.zip"
        echo TORCH_PATH=$(pwd)/libtorch | tee -a $GITHUB_ENV
      # echo CXX=clang | tee -a $GITHUB_ENV

      # Create a separate build directory
      # We'll use this as our working directory for subsequent commands
    - name: Create Build Environment
      shell: bash
      run: cmake -E make_directory $BUILD_PATH

    - name: Configure CMake
      shell: bash
      working-directory: ${{ env.BUILD_PATH }}
      run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH="$SC_PATH" -DCMAKE_INSTALL_PREFIX="$INSTALL_PATH" -DCMAKE_PREFIX_PATH="${TORCH_PATH};/usr/local"

    - name: Build
      shell: bash
      working-directory: ${{ env.BUILD_PATH }}
      env:
        CMAKE_BUILD_PARALLEL_LEVEL: 4
      run: cmake --build . --config "Release" --target install

      # Gather all files in a zip
    - name: Zip up build (Unix)
      if: runner.os != 'Windows'
      shell: bash
      working-directory: ${{ env.INSTALL_PATH }}
      run: zip -r "$ARCHIVE_NAME" "RAVE"

      # Gather all files in a zip
    - name: Zip up build (Windows)
      if: runner.os == 'Windows'
      shell: bash
      working-directory: ${{ env.INSTALL_PATH }}
      run: 7z a "$ARCHIVE_NAME" -tzip "RAVE"

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.INSTALL_PATH }}/${{ env.ARCHIVE_NAME }}
        prerelease: true
        body: ""
        tag: ${{ github.ref }}
